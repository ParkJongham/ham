# -*- coding: utf-8 -*-
"""FaceDetection&CameraApply Sticker.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/181pfe1cdffxti49b-rKFhiSkvupqFo2U
"""

# 필요 라이브러리 임포트

import cv2
import matplotlib.pyplot as plt
import numpy as np
import os
import dlib

# 이미지 경로 설정 및 불러오기

my_image_path = os.getenv('HOME')+'/camera_sticker/images/image2.jpg'

img_bgr = cv2.imread(my_image_path)    
img_bgr = cv2.resize(img_bgr, (640, 480))    
img_show = img_bgr.copy()   

plt.imshow(img_bgr)
plt.show()

# RGB 사진으로 재변환

img_rgb = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2RGB)
plt.imshow(img_rgb)
plt.show()

# dlib hog 선언, dector을 통한 얼굴 bounding box 추출

detector_hog = dlib.get_frontal_face_detector() 

img_rgb = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2RGB)
dlib_rects = detector_hog(img_rgb, 1)

# 얼굴 영역 좌표를 찾고 출력

print(dlib_rects)

for dlib_rect in dlib_rects:
    l = dlib_rect.left()
    t = dlib_rect.top()
    r = dlib_rect.right()
    b = dlib_rect.bottom()

    cv2.rectangle(img_show, (l,t), (r,b), (0,255,0), 2, lineType=cv2.LINE_AA)

img_show_rgb =  cv2.cvtColor(img_show, cv2.COLOR_BGR2RGB)
plt.imshow(img_show_rgb)
plt.show()

# 저장한 landmark 모델을 불러오기

model_path = os.getenv('HOME')+'/camera_sticker/models/shape_predictor_68_face_landmarks.dat'
landmark_predictor = dlib.shape_predictor(model_path)

list_lanmarks = []

for dlib_rect in dlib_rects :
  points = landmark_predictor(img_rgb, dlib_rect)
  list_points = list(map(lambda p : (p.x, p.y), points.parts()))
  list_landmarks.append(list_points)

print(len(list_landmarks[0]))

# 랜드마크를 영상이 출력

for landmark in list_landmarks : 
  for idx, point in enumerate(list_points) :
    cv2.circle(img_show, point, 2, (0, 255, 255), -1)

img_show_rgb = cv2.cvtColor(img_show, cv2.COLOR_BGR2RGB)

plt.imshow(img_show_rgb)
plt.show()

# 스티커 적용을 위한 좌표 확인 (코의 중심점 확인)

for dlib_rect, landmark in zip(dlib_rects, list_landmarks) :
  print(landmark[30])
  x = landmark[30][0]
  y = landmark[30][1] - dlib_rect.width() // 2
  w = dlib_rect.width()
  h = dlib_rect.width()

  print('(x, y) : (%d, %d)' %(x, y))
  print('(x, y) : (%d, %d)' %(w, h))

# 스티커 이미지를 적용 (스티커를 윗 단계에서 계산한 크기로 resize)

sticker_path = os.getenv('HOME') + '/aiffel/camera_sticker/images/king.png'
img_sticker = cv2.imread(sticker_path)
img_sticker = cv2.resize(img_sticker, (w, h))

print(img_sticker.shape)

# 원본 이미지에 스티커 추가를 위한 x, y 좌표 조정 (이미지 시작점은 top - left 좌표이기 때문)

# lefr
refind_x = x - w // 2

# top
refind_y = y - h

print('(x, y) : (%d, %d' %(refind_x, refined_y))

# 음수 좌표값에 대한 예외처리 및 범위를 벗어난 스티커 부분 제거

img_sticker = img_sticker[-refined_y:]
print(img_sticker.shape)

# y 좌표를 이미지 경계값으로 수정

refined_y = 0
print('(x, y) : (%d, %d)' %(refined_x, refined_y))

# 이미지에 스티커 적용

sticker_area = img_show[refined_y : img_sticker.shape[0], refined_x : refined_x + img_sticker.shape[1]]
img_show[refined_y : img_sticker.shape[0], refined_x : refined_x + img_sticker.shape[1]] = \
    np.where(img_sticker == 0, sticker_area, img_sticker).astype(np.uint8)

# 결과 출력

plt.imshow(cv2.cvtColor(img_show, cv2.COLOR_BGR2RGB))
plt.show()

# 최종결과 출력

sticker_area = img_bgr[refined_y : img_sticker.shape[0], refined_x : refined_x + img_sticker.shape[1]]
img_bgr[refined_y : img_sticker.shape[0], refined_x : refined_x + img_sticker.shape[1]] = \
    np.where(img_sticker == 0,sticker_area, img_sticker).astype(np.uint8)
plt.imshow(cv2.cvtColor(img_bgr, cv2.COLOR_BGR2RGB))
plt.show()

